import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
// import { RootState, AppThunk } from '../../app/store';
import {AuthorizeModel} from './model';

const initialState: AuthorizeModel = {
  isLoggedIn: false,
  token: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(getUserById('user-1'))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const getUserById = createAsyncThunk('counter/fetchCount', async (id: string) => {
//   const response = await User.getUserById(id);
//   // The value we return becomes the `fulfilled` action payload
//   return response;
// });

export const authSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setToken: (state, action: PayloadAction<string>) => {
      state.token = action.payload;
    },
    setisLoggedIn: (state, action: PayloadAction<boolean>) => {
      state.isLoggedIn = action.payload;
    },
    loginSuccessed: state => {
      console.log('@DUKE_Redux_loginSuccessed');
      state.isLoggedIn = true;
    },
    logout: state => {
      console.log('@DUKE_Redux_logout');
      state.isLoggedIn = false;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: builder => {
  //     builder
  //       .addCase(getUserById.pending, state => {
  //         state.status = 'loading';
  //       })
  //       .addCase(getUserById.fulfilled, (state, action) => {
  //         state.status = 'idle';
  //       })
  //       .addCase(getUserById.rejected, state => {
  //         state.status = 'failed';
  //       });
  //   },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export const authActions = authSlice.actions;
const authReducer = authSlice.reducer;
export default authReducer;
